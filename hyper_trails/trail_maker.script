local trail_maker = require("hyper_trails.trail_maker")

go.property("use_world_position", false)
go.property("trail_width", 20)
go.property("trail_tint_color", vmath.vector4(1.0, 1.0, 1.0, 1.0))
go.property("segment_length_max", 0)
go.property("segment_length_min", 0)
go.property("points_count", 16)
go.property("points_limit", 0)
go.property("fade_tail_alpha", 0)
go.property("shrink_tail_width", false)
go.property("shrink_length_per_sec", 0)
go.property("texture_tiling", true)
go.property("trail_mesh_url", msg.url("#trail_mesh"))
go.property("auto_update", true)

local function reset_trail(self)
	trail_maker.init_vars(self)
	trail_maker.init_buffers(self)
	trail_maker.init_props(self)
	trail_maker.init_data_points(self)
	trail_maker.draw_trail(self)
end

function init(self)
	reset_trail(self)
end

local function update_trail(self, dt)
	trail_maker.follow_position(self, self.dt)
	trail_maker.draw_trail(self)
end

function update(self, dt)
	self.dt = dt
	if self.auto_update then
		update_trail(self, dt)
	end
end

local UPDATE = hash("update")
local RESET = hash("reset")

function on_message(self, message_id, message, sender)
	if message_id == UPDATE then
		update_trail(self, message.dt or self.dt)
	elseif message_id == RESET then
		reset_trail(self)
	end
end

function final(self)
	trail_maker.final(self)
end